name: API Tests • Allure Report • Pages

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  schedule:

# Default to read
permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  tests:
    name: Run tests (continue on failures)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f pyproject.toml ]; then pip install -e ".[dev]" || true; fi

      - name: Run pytest (produce Allure results)
        id: pytest
        continue-on-error: true
        run: |
          mkdir -p allure-results
          # Use custom test runner with rate limiting protection
          python scripts/run_tests_with_delay.py || exit_code=$?
          echo "exit_code=${exit_code:-0}" >> "$GITHUB_OUTPUT"
          if [ "${exit_code:-0}" -ne 0 ]; then
            echo "Some tests failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "All tests passed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Allure raw results
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results
          if-no-files-found: warn

      - name: Upload JUnit & HTML reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            reports/**
          if-no-files-found: ignore

  performance_tests:
    name: Run Locust performance tests
    needs: tests
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f pyproject.toml ]; then pip install -e ".[dev]" || true; fi

      - name: Run Locust performance tests
        id: locust
        continue-on-error: true
        run: |
          mkdir -p allure-results
          # Run Locust in headless mode with CSV output for Allure integration
          locust --headless \
            -u 10 \
            -r 2 \
            -t 1m \
            --host=https://reqres.in \
            --csv=locust_results \
            --html=locust-report.html \
            -f perf/locustfile.py || exit_code=$?
          echo "exit_code=${exit_code:-0}" >> "$GITHUB_OUTPUT"
          if [ "${exit_code:-0}" -ne 0 ]; then
            echo "Performance tests had issues" >> $GITHUB_STEP_SUMMARY
          else
            echo "Performance tests completed successfully" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Generate Allure results for Locust
        run: |
          python scripts/locust_to_allure.py \
            --csv-file locust_results_stats.csv \
            --output-dir allure-results

      - name: Upload Locust HTML report
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: locust-report
          path: locust-report.html
          if-no-files-found: warn

      - name: Upload Locust Allure results
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-locust
          path: allure-results
          if-no-files-found: warn

  build_allure:
    name: Build Allure report (fails if report generation fails)
    needs: [tests, performance_tests]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Download pytest Allure results
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: ./allure-results-pytest

      - name: Download Locust Allure results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-locust
          path: ./allure-results-locust

      - name: Merge Allure results
        run: |
          mkdir -p ./allure-results
          # Copy pytest results
          if [ -d "./allure-results-pytest" ]; then
            cp -r ./allure-results-pytest/* ./allure-results/ 2>/dev/null || true
          fi
          # Copy Locust results
          if [ -d "./allure-results-locust" ]; then
            cp -r ./allure-results-locust/* ./allure-results/ 2>/dev/null || true
          fi

      - name: Checkout previous gh-pages to pull history
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages

      - name: Copy history from previous report
        run: |
          if [ -d gh-pages/data/history ]; then
            mkdir -p allure-results/history
            cp -r gh-pages/data/history/* allure-results/history/ || true
          fi

      - name: Build Allure report with history
        id: allure
        uses: simple-elf/allure-report-action@v1.13
        with:
          allure_results: ./allure-results
          allure_report: ./allure-report
          allure_history: ./allure-history

      - name: Upload built report (debug artifact)
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-built
          path: |
            ./allure-report/**
            ./allure-history/**
          if-no-files-found: error

  deploy_pages:
    name: Publish Allure to GitHub Pages
    needs: build_allure
    if: ${{ always() }}
    runs-on: ubuntu-latest
    # Only this job needs write to contents for gh-pages pushes
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Download built report
        uses: actions/download-artifact@v4
        with:
          name: allure-report-built
          path: ./
      
      - name: Find latest report subfolder
        id: latest
        run: |
          latest=$(ls -d */ | grep -E '^[0-9]+/$' | sed 's#/##' | sort -n | tail -1)
          echo "latest_folder=$latest" >> $GITHUB_OUTPUT

      - name: Create root index.html that redirects to latest report
        run: |
          cat <<EOF > index.html
          <!DOCTYPE html>
          <html>
            <head>
              <meta http-equiv="refresh" content="0; url=${{ steps.latest.outputs.latest_folder }}/">
              <title>Redirecting to the latest Allure report...</title>
            </head>
            <body>
              <p>Redirecting to the latest Allure report...</p>
              <a href="${{ steps.latest.outputs.latest_folder }}/">Click here if you are not redirected.</a>
            </body>
          </html>
          EOF
      
      - name: Publish to gh-pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./allure-history
          commit_message: "docs: update Allure report for ${{ github.sha }}"
